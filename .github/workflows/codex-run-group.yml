name: Codex Run Group

on:
  workflow_dispatch:
    inputs:
      run_group_id:
        description: Supabase run_groups.id (UUID)
        required: true

permissions:
  contents: read

jobs:
  fetch:
    runs-on: ubuntu-latest
    outputs:
      items: ${{ steps.get.outputs.items }}
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch run items from Supabase
        id: get
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE: ${{ secrets.SUPABASE_SERVICE_ROLE }}
          RUN_GROUP: ${{ github.event.inputs.run_group_id }}
        run: |
          set -euo pipefail
          echo "Fetching items for group: $RUN_GROUP"
          RESP=$(curl -fsS \
            "$SUPABASE_URL/rest/v1/run_items?select=id,agent,repo,base_branch,branch,goal&run_group_id=eq.$RUN_GROUP" \
            -H "apikey: $SUPABASE_SERVICE_ROLE" \
            -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE" \
            -H "Accept: application/json")
          echo "::group::Supabase response"; echo "$RESP" | jq .; echo "::endgroup::"
          COUNT=$(echo "$RESP" | jq 'length')
          if [ "$COUNT" -eq 0 ]; then
            echo "No run_items found for $RUN_GROUP"; exit 1; fi
          echo "items=$(echo "$RESP" | jq -c '.')" >> "$GITHUB_OUTPUT"

  run:
    needs: fetch
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        item: ${{ fromJson(needs.fetch.outputs.items) }}

    steps:
      - name: Show matrix item
        run: |
          echo '${{ toJson(matrix.item) }}'

      - name: Validate PEM format
        run: |
          echo "${{ secrets.CODEX_GH_APP_PRIVATE_KEY }}" | head -n1 | grep -q "BEGIN RSA PRIVATE KEY" || {
            echo "ERROR: CODEX_GH_APP_PRIVATE_KEY is not a PEM (missing BEGIN header).";
            exit 1;
          }

      # üîë Create an installation token for your app (tibdex v2 syntax)
      - name: GitHub App token
        id: app-token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.CODEX_GH_APP_ID }}
          private_key: ${{ secrets.CODEX_GH_APP_PRIVATE_KEY }}
          installation_retrieval_mode: id
          installation_retrieval_payload: 83374764  # your installation_id

      - name: Versions
        run: |
          set -x
          git --version
          gh --version

      # ‚úÖ Clone the target repo using the App token (avoids 128 from auth)
      - name: Clone target repo (with app token)
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          REPO: ${{ matrix.item.repo }}
        run: |
          set -euo pipefail
          git clone "https://x-access-token:${GH_TOKEN}@github.com/${REPO}.git" repo
          git config --global --add safe.directory "$GITHUB_WORKSPACE/repo"

      # ü™µ Prepare branch idempotently (no fail if branch already exists)
      - name: Prepare branch
        working-directory: repo
        env:
          BASE: ${{ matrix.item.base_branch }}
          BRANCH: ${{ matrix.item.branch }}
        run: |
          set -euo pipefail
          set -x
          git fetch origin "$BASE" --depth=1 || git fetch origin --unshallow
          # Create or reset local branch to base
          git checkout -B "$BRANCH" "origin/$BASE"

      # üìù Commit a placeholder patch (replace with agent patch later)
      - name: Commit patch
        working-directory: repo
        env:
          GOAL: ${{ matrix.item.goal }}
          ITEM_ID: ${{ matrix.item.id }}
        run: |
          set -euo pipefail
          set -x
          git config user.name "codex-bot"
          git config user.email "bot@codex.local"
          echo "$GOAL" > "codex-${ITEM_ID}.txt"
          git add .
          git commit -m "codex: $GOAL" || echo "Nothing to commit (maybe already exists)"

      # ‚¨ÜÔ∏è Push safely (force-with-lease handles reruns)
      - name: Push branch
        working-directory: repo
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          REPO: ${{ matrix.item.repo }}
          BRANCH: ${{ matrix.item.branch }}
        run: |
          set -euo pipefail
          set -x
          git remote set-url origin "https://x-access-token:${GH_TOKEN}@github.com/${REPO}.git"
          git push -u origin "$BRANCH" --force-with-lease

      # üîé Only open a PR if there isn't one already
      - name: Open PR (idempotent)
        working-directory: repo
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          BASE: ${{ matrix.item.base_branch }}
          BRANCH: ${{ matrix.item.branch }}
          GOAL: ${{ matrix.item.goal }}
        run: |
          set -euo pipefail
          set -x
          # Is there already an open PR from this branch?
          EXISTING=$(gh pr list --head "$BRANCH" --state open --json number --jq '.[0].number' || true)
          if [ -n "$EXISTING" ]; then
            echo "PR #$EXISTING already open for $BRANCH; skipping create."
            exit 0
          fi
          gh pr create --base "$BASE" --head "$BRANCH" \
            --title "codex: $GOAL" \
            --body "- [ ] typecheck\n- [ ] tests\n- [ ] preview"
